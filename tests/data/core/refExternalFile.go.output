// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.

package test
import "encoding/json"
import "fmt"

type 421ArrayMyObjectArrayElem map[string]interface{}
type 421Array struct {
	// MyBooleanArray corresponds to the JSON schema field "myBooleanArray".
	MyBooleanArray []bool `json:"myBooleanArray,omitempty"`

	// MyNullArray corresponds to the JSON schema field "myNullArray".
	MyNullArray []interface{} `json:"myNullArray,omitempty"`

	// MyNumberArray corresponds to the JSON schema field "myNumberArray".
	MyNumberArray []float64 `json:"myNumberArray,omitempty"`

	// MyObjectArray corresponds to the JSON schema field "myObjectArray".
	MyObjectArray []421ArrayMyObjectArrayElem `json:"myObjectArray,omitempty"`

	// MyStringArray corresponds to the JSON schema field "myStringArray".
	MyStringArray []string `json:"myStringArray,omitempty"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *421Array) UnmarshalJSON(b []byte) error {
	var v struct {
	}
	if err := json.Unmarshal(b, &v); err != nil { return err }
	type plain 421Array
	var p plain
	if err := json.Unmarshal(b, &p); err != nil { return err }
	*j = 421Array(p)
	return nil
}


type ObjectMyObject struct {
	// MyString corresponds to the JSON schema field "myString".
	MyString string `json:"myString"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ObjectMyObject) UnmarshalJSON(b []byte) error {
	var v struct {
		MyString *string `json:"myString"`
	}
	if err := json.Unmarshal(b, &v); err != nil { return err }
	if v.MyString == nil {
		return fmt.Errorf("field myString: must be set")
	}
	type plain ObjectMyObject
	var p plain
	if err := json.Unmarshal(b, &p); err != nil { return err }
	*j = ObjectMyObject(p)
	return nil
}


type Object struct {
	// MyObject corresponds to the JSON schema field "myObject".
	MyObject *ObjectMyObject `json:"myObject,omitempty"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *Object) UnmarshalJSON(b []byte) error {
	var v struct {
	}
	if err := json.Unmarshal(b, &v); err != nil { return err }
	type plain Object
	var p plain
	if err := json.Unmarshal(b, &p); err != nil { return err }
	*j = Object(p)
	return nil
}


type ObjectEmptyFoo map[string]interface{}
type ObjectEmpty struct {
	// Foo corresponds to the JSON schema field "foo".
	Foo ObjectEmptyFoo `json:"foo,omitempty"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ObjectEmpty) UnmarshalJSON(b []byte) error {
	var v struct {
	}
	if err := json.Unmarshal(b, &v); err != nil { return err }
	type plain ObjectEmpty
	var p plain
	if err := json.Unmarshal(b, &p); err != nil { return err }
	*j = ObjectEmpty(p)
	return nil
}


type ObjectNestedMyObjectMyObject struct {
	// MyString corresponds to the JSON schema field "myString".
	MyString *string `json:"myString,omitempty"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ObjectNestedMyObjectMyObject) UnmarshalJSON(b []byte) error {
	var v struct {
	}
	if err := json.Unmarshal(b, &v); err != nil { return err }
	type plain ObjectNestedMyObjectMyObject
	var p plain
	if err := json.Unmarshal(b, &p); err != nil { return err }
	*j = ObjectNestedMyObjectMyObject(p)
	return nil
}


type ObjectNestedMyObject struct {
	// MyObject corresponds to the JSON schema field "myObject".
	MyObject *ObjectNestedMyObjectMyObject `json:"myObject,omitempty"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ObjectNestedMyObject) UnmarshalJSON(b []byte) error {
	var v struct {
	}
	if err := json.Unmarshal(b, &v); err != nil { return err }
	type plain ObjectNestedMyObject
	var p plain
	if err := json.Unmarshal(b, &p); err != nil { return err }
	*j = ObjectNestedMyObject(p)
	return nil
}


type ObjectNested struct {
	// MyObject corresponds to the JSON schema field "myObject".
	MyObject *ObjectNestedMyObject `json:"myObject,omitempty"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ObjectNested) UnmarshalJSON(b []byte) error {
	var v struct {
	}
	if err := json.Unmarshal(b, &v); err != nil { return err }
	type plain ObjectNested
	var p plain
	if err := json.Unmarshal(b, &p); err != nil { return err }
	*j = ObjectNested(p)
	return nil
}


type Primitives struct {
	// MyBoolean corresponds to the JSON schema field "myBoolean".
	MyBoolean *bool `json:"myBoolean,omitempty"`

	// MyNull corresponds to the JSON schema field "myNull".
	MyNull interface{} `json:"myNull,omitempty"`

	// MyNumber corresponds to the JSON schema field "myNumber".
	MyNumber *float64 `json:"myNumber,omitempty"`

	// MyString corresponds to the JSON schema field "myString".
	MyString *string `json:"myString,omitempty"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *Primitives) UnmarshalJSON(b []byte) error {
	var v struct {
	}
	if err := json.Unmarshal(b, &v); err != nil { return err }
	type plain Primitives
	var p plain
	if err := json.Unmarshal(b, &p); err != nil { return err }
	*j = Primitives(p)
	return nil
}


type Thing struct {
	// A field.
	Name *string `json:"name,omitempty"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *Thing) UnmarshalJSON(b []byte) error {
	var v struct {
	}
	if err := json.Unmarshal(b, &v); err != nil { return err }
	type plain Thing
	var p plain
	if err := json.Unmarshal(b, &p); err != nil { return err }
	*j = Thing(p)
	return nil
}


// A simple schema.
type Ref struct {
	// MyThing corresponds to the JSON schema field "myThing".
	MyThing *Thing `json:"myThing,omitempty"`

	// MyThing2 corresponds to the JSON schema field "myThing2".
	MyThing2 *Thing `json:"myThing2,omitempty"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *Ref) UnmarshalJSON(b []byte) error {
	var v struct {
	}
	if err := json.Unmarshal(b, &v); err != nil { return err }
	type plain Ref
	var p plain
	if err := json.Unmarshal(b, &p); err != nil { return err }
	*j = Ref(p)
	return nil
}


type Thing_1 struct {
	// A field.
	Name *string `json:"name,omitempty"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *Thing_1) UnmarshalJSON(b []byte) error {
	var v struct {
	}
	if err := json.Unmarshal(b, &v); err != nil { return err }
	type plain Thing_1
	var p plain
	if err := json.Unmarshal(b, &p); err != nil { return err }
	*j = Thing_1(p)
	return nil
}


// A simple schema.
type RefExternalFile struct {
	// MyExternalThing corresponds to the JSON schema field "myExternalThing".
	MyExternalThing *Thing_1 `json:"myExternalThing,omitempty"`

	// SomeOtherExternalThing corresponds to the JSON schema field
	// "someOtherExternalThing".
	SomeOtherExternalThing *Thing_1 `json:"someOtherExternalThing,omitempty"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *RefExternalFile) UnmarshalJSON(b []byte) error {
	var v struct {
	}
	if err := json.Unmarshal(b, &v); err != nil { return err }
	type plain RefExternalFile
	var p plain
	if err := json.Unmarshal(b, &p); err != nil { return err }
	*j = RefExternalFile(p)
	return nil
}

