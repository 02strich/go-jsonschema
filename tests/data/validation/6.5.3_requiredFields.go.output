// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.

package test
import "encoding/json"
import "fmt"
import "reflect"

// A simple schema.
type 101Description struct {
	// MyDescriptionlessField corresponds to the JSON schema field
	// "myDescriptionlessField".
	MyDescriptionlessField *string `json:"myDescriptionlessField,omitempty"`

	// A string field.
	MyField *string `json:"myField,omitempty"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *101Description) UnmarshalJSON(b []byte) error {
	var v struct {
	}
	if err := json.Unmarshal(b, &v); err != nil { return err }
	type plain 101Description
	var p plain
	if err := json.Unmarshal(b, &p); err != nil { return err }
	*j = 101Description(p)
	return nil
}


type 612EnumMyBooleanTypedEnumEnum bool
var enumValues_612EnumMyBooleanTypedEnumEnum  = []interface {}{
  true,
  false,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *612EnumMyBooleanTypedEnumEnum) UnmarshalJSON(b []byte) error {
	var v bool
	if err := json.Unmarshal(b, &v); err != nil { return err }
	var ok bool
	for _, expected := range enumValues_612EnumMyBooleanTypedEnumEnum {
	if reflect.DeepEqual(v, expected) { ok = true; break }
	}
	if !ok {
	return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_612EnumMyBooleanTypedEnumEnum, v)
	}
	*j = 612EnumMyBooleanTypedEnumEnum(v)
	return nil
}


type 612EnumMyMixedUntypedEnumEnum struct {
	Value interface{}
}
var enumValues_612EnumMyMixedUntypedEnumEnum  = []interface {}{
  "red",
  1,
  true,
  nil,
}

// MarshalJSON implements json.Marshaler.
func (j *612EnumMyMixedUntypedEnumEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(j.Value)
}



// UnmarshalJSON implements json.Unmarshaler.
func (j *612EnumMyMixedUntypedEnumEnum) UnmarshalJSON(b []byte) error {
	var v struct {
		Value interface{}
	}
	if err := json.Unmarshal(b, &v.Value); err != nil { return err }
	var ok bool
	for _, expected := range enumValues_612EnumMyMixedUntypedEnumEnum {
	if reflect.DeepEqual(v.Value, expected) { ok = true; break }
	}
	if !ok {
	return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_612EnumMyMixedUntypedEnumEnum, v.Value)
	}
	*j = 612EnumMyMixedUntypedEnumEnum(v)
	return nil
}


type 612EnumMyNullTypedEnumEnum struct {
	Value interface{}
}
var enumValues_612EnumMyNullTypedEnumEnum  = []interface {}{
  nil,
}

// MarshalJSON implements json.Marshaler.
func (j *612EnumMyNullTypedEnumEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(j.Value)
}



// UnmarshalJSON implements json.Unmarshaler.
func (j *612EnumMyNullTypedEnumEnum) UnmarshalJSON(b []byte) error {
	var v struct {
		Value interface{}
	}
	if err := json.Unmarshal(b, &v.Value); err != nil { return err }
	var ok bool
	for _, expected := range enumValues_612EnumMyNullTypedEnumEnum {
	if reflect.DeepEqual(v.Value, expected) { ok = true; break }
	}
	if !ok {
	return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_612EnumMyNullTypedEnumEnum, v.Value)
	}
	*j = 612EnumMyNullTypedEnumEnum(v)
	return nil
}


type 612EnumMyNumberTypedEnumEnum float64
var enumValues_612EnumMyNumberTypedEnumEnum  = []interface {}{
  1,
  2,
  3,
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *612EnumMyNumberTypedEnumEnum) UnmarshalJSON(b []byte) error {
	var v float64
	if err := json.Unmarshal(b, &v); err != nil { return err }
	var ok bool
	for _, expected := range enumValues_612EnumMyNumberTypedEnumEnum {
	if reflect.DeepEqual(v, expected) { ok = true; break }
	}
	if !ok {
	return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_612EnumMyNumberTypedEnumEnum, v)
	}
	*j = 612EnumMyNumberTypedEnumEnum(v)
	return nil
}


type 612EnumMyStringTypedEnumEnum string
var enumValues_612EnumMyStringTypedEnumEnum  = []interface {}{
  "red",
  "blue",
  "green",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *612EnumMyStringTypedEnumEnum) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil { return err }
	var ok bool
	for _, expected := range enumValues_612EnumMyStringTypedEnumEnum {
	if reflect.DeepEqual(v, expected) { ok = true; break }
	}
	if !ok {
	return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_612EnumMyStringTypedEnumEnum, v)
	}
	*j = 612EnumMyStringTypedEnumEnum(v)
	return nil
}


const 612EnumMyStringTypedEnumEnumRed 612EnumMyStringTypedEnumEnum = "red"
const 612EnumMyStringTypedEnumEnumBlue 612EnumMyStringTypedEnumEnum = "blue"
const 612EnumMyStringTypedEnumEnumGreen 612EnumMyStringTypedEnumEnum = "green"
type 612Enum struct {
	// MyBooleanTypedEnum corresponds to the JSON schema field "myBooleanTypedEnum".
	MyBooleanTypedEnum *612EnumMyBooleanTypedEnumEnum `json:"myBooleanTypedEnum,omitempty"`

	// MyBooleanUntypedEnum corresponds to the JSON schema field
	// "myBooleanUntypedEnum".
	MyBooleanUntypedEnum *612EnumMyBooleanTypedEnumEnum `json:"myBooleanUntypedEnum,omitempty"`

	// MyMixedUntypedEnum corresponds to the JSON schema field "myMixedUntypedEnum".
	MyMixedUntypedEnum *612EnumMyMixedUntypedEnumEnum `json:"myMixedUntypedEnum,omitempty"`

	// MyNullTypedEnum corresponds to the JSON schema field "myNullTypedEnum".
	MyNullTypedEnum *612EnumMyNullTypedEnumEnum `json:"myNullTypedEnum,omitempty"`

	// MyNullUntypedEnum corresponds to the JSON schema field "myNullUntypedEnum".
	MyNullUntypedEnum *612EnumMyNullTypedEnumEnum `json:"myNullUntypedEnum,omitempty"`

	// MyNumberTypedEnum corresponds to the JSON schema field "myNumberTypedEnum".
	MyNumberTypedEnum *612EnumMyNumberTypedEnumEnum `json:"myNumberTypedEnum,omitempty"`

	// MyNumberUntypedEnum corresponds to the JSON schema field "myNumberUntypedEnum".
	MyNumberUntypedEnum *612EnumMyNumberTypedEnumEnum `json:"myNumberUntypedEnum,omitempty"`

	// MyStringTypedEnum corresponds to the JSON schema field "myStringTypedEnum".
	MyStringTypedEnum *612EnumMyStringTypedEnumEnum `json:"myStringTypedEnum,omitempty"`

	// MyStringUntypedEnum corresponds to the JSON schema field "myStringUntypedEnum".
	MyStringUntypedEnum *612EnumMyStringTypedEnumEnum `json:"myStringUntypedEnum,omitempty"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *612Enum) UnmarshalJSON(b []byte) error {
	var v struct {
	}
	if err := json.Unmarshal(b, &v); err != nil { return err }
	type plain 612Enum
	var p plain
	if err := json.Unmarshal(b, &p); err != nil { return err }
	*j = 612Enum(p)
	return nil
}


type 653RequiredFieldsMyObject struct {
	// MyNestedObjectString corresponds to the JSON schema field
	// "myNestedObjectString".
	MyNestedObjectString string `json:"myNestedObjectString"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *653RequiredFieldsMyObject) UnmarshalJSON(b []byte) error {
	var v struct {
		MyNestedObjectString *string `json:"myNestedObjectString"`
	}
	if err := json.Unmarshal(b, &v); err != nil { return err }
	if v.MyNestedObjectString == nil {
		return fmt.Errorf("field myNestedObjectString: must be set")
	}
	type plain 653RequiredFieldsMyObject
	var p plain
	if err := json.Unmarshal(b, &p); err != nil { return err }
	*j = 653RequiredFieldsMyObject(p)
	return nil
}


type 653RequiredFieldsMyObjectArrayElem struct {
	// MyNestedObjectString corresponds to the JSON schema field
	// "myNestedObjectString".
	MyNestedObjectString string `json:"myNestedObjectString"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *653RequiredFieldsMyObjectArrayElem) UnmarshalJSON(b []byte) error {
	var v struct {
		MyNestedObjectString *string `json:"myNestedObjectString"`
	}
	if err := json.Unmarshal(b, &v); err != nil { return err }
	if v.MyNestedObjectString == nil {
		return fmt.Errorf("field myNestedObjectString: must be set")
	}
	type plain 653RequiredFieldsMyObjectArrayElem
	var p plain
	if err := json.Unmarshal(b, &p); err != nil { return err }
	*j = 653RequiredFieldsMyObjectArrayElem(p)
	return nil
}


type 653RequiredFields struct {
	// MyBoolean corresponds to the JSON schema field "myBoolean".
	MyBoolean bool `json:"myBoolean"`

	// MyBooleanArray corresponds to the JSON schema field "myBooleanArray".
	MyBooleanArray []bool `json:"myBooleanArray"`

	// MyNull corresponds to the JSON schema field "myNull".
	MyNull interface{} `json:"myNull"`

	// MyNullArray corresponds to the JSON schema field "myNullArray".
	MyNullArray []interface{} `json:"myNullArray"`

	// MyNumber corresponds to the JSON schema field "myNumber".
	MyNumber float64 `json:"myNumber"`

	// MyNumberArray corresponds to the JSON schema field "myNumberArray".
	MyNumberArray []float64 `json:"myNumberArray"`

	// MyObject corresponds to the JSON schema field "myObject".
	MyObject 653RequiredFieldsMyObject `json:"myObject"`

	// MyObjectArray corresponds to the JSON schema field "myObjectArray".
	MyObjectArray []653RequiredFieldsMyObjectArrayElem `json:"myObjectArray"`

	// MyString corresponds to the JSON schema field "myString".
	MyString string `json:"myString"`

	// MyStringArray corresponds to the JSON schema field "myStringArray".
	MyStringArray []string `json:"myStringArray"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *653RequiredFields) UnmarshalJSON(b []byte) error {
	var v struct {
		MyBoolean *bool `json:"myBoolean"`
		MyNumber *float64 `json:"myNumber"`
		MyObject *653RequiredFieldsMyObject `json:"myObject"`
		MyString *string `json:"myString"`
	}
	if err := json.Unmarshal(b, &v); err != nil { return err }
	if v.MyBoolean == nil {
		return fmt.Errorf("field myBoolean: must be set")
	}
	if v.MyNumber == nil {
		return fmt.Errorf("field myNumber: must be set")
	}
	if v.MyObject == nil {
		return fmt.Errorf("field myObject: must be set")
	}
	if v.MyString == nil {
		return fmt.Errorf("field myString: must be set")
	}
	type plain 653RequiredFields
	var p plain
	if err := json.Unmarshal(b, &p); err != nil { return err }
	if len(p.MyBooleanArray) == 0 {
		return fmt.Errorf("field myBooleanArray: array cannot be empty")
	}
	if len(p.MyNullArray) == 0 {
		return fmt.Errorf("field myNullArray: array cannot be empty")
	}
	if len(p.MyNumberArray) == 0 {
		return fmt.Errorf("field myNumberArray: array cannot be empty")
	}
	if len(p.MyObjectArray) == 0 {
		return fmt.Errorf("field myObjectArray: array cannot be empty")
	}
	if len(p.MyStringArray) == 0 {
		return fmt.Errorf("field myStringArray: array cannot be empty")
	}
	*j = 653RequiredFields(p)
	return nil
}

